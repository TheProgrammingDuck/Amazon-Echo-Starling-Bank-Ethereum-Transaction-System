{"version":3,"names":[],"mappings":"","sources":["entities/contact.js"],"sourcesContent":["import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders, postHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:contact-service');\n\n/**\n * Service to interact with a customer's contacts (payees)\n */\nclass Contact {\n\n  /**\n   * Create a new contact service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's contacts (payees)\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getContacts (accessToken) {\n    typeValidation(arguments, getContactsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets a specific contact's (payee) account details\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the contact's ID.\n   * @return {Promise} - the http request promise\n   */\n  getContactAccount (accessToken, contactId) {\n    typeValidation(arguments, getContactAccountParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts/${contactId}/accounts`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} name - the name of the new contact.\n   * @param {string} accountType - the account type (domestic or international).\n   * @param {string} accountNumber - the contact's bank account number.\n   * @param {string} sortCode - the contact's sort code.\n   * @param {string} customerId - the customer's ID. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createContact (accessToken, name, accountType, accountNumber, sortCode, customerId) {\n    typeValidation(arguments, createContactParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts`;\n    log(`POST ${url}`);\n    return axios({\n      method: 'POST',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        accountType,\n        accountNumber,\n        sortCode,\n        customerId\n      }),\n    });\n  }\n\n\n  /**\n   * Deletes a specific contact (payee) from the customer's account\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the Identifier of the contact to be deleted.\n   * @return {Promise} - the http request promise\n   */\n  deleteContact (accessToken, contactId) {\n    typeValidation(arguments, deleteContactParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts/${contactId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken),\n    });\n  }\n}\n\nconst getContactsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nconst getContactAccountParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'contactId', validations: ['required', 'string']}\n  ];\n\nconst createContactParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'name', validations: ['required', 'string']},\n  {name: 'accountType', validations: ['required', 'string']},\n  {name: 'accountNumber', validations: ['required', 'string']},\n  {name: 'sortCode', validations: ['required', 'string']},\n  {name: 'customerId', validations: ['optional', 'string']}\n  ];\n\nconst deleteContactParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'contactId', validations: ['required', 'string']}\n];\n\nmodule.exports = Contact;\n"],"file":"contact.js"}