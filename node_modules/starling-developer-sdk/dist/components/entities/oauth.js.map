{"version":3,"names":[],"mappings":"","sources":["entities/oauth.js"],"sourcesContent":["import axios from 'axios';\nimport debug from 'debug';\nimport {typeValidation} from '../utils/validator';\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code';\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token';\n\nconst log = debug('starling:oauth-service');\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the\n   * user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    typeValidation(arguments, authorizationCodeParameterDefinition);\n    return this.getOAuthToken({\n      'code': authorizationCode,\n      'grant_type': ACCESS_TOKEN_GRANT_TYPE,\n      'client_id': this.options.clientId,\n      'client_secret': this.options.clientSecret,\n      'redirect_uri': this.options.redirectUri\n    });\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token\n   * expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    typeValidation(arguments, refreshTokenParameterDefinition);\n    return this.getOAuthToken({\n      'refresh_token': refreshToken,\n      'grant_type': REFRESH_TOKEN_GRANT_TYPE,\n      'client_id': this.options.clientId,\n      'client_secret': this.options.clientSecret\n    });\n  }\n\n  /**\n   * Gets the access token from the starling oauth endpoint\n   * @param {object} params - the query params passed to the oauth endpoint as per the oauth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (params) {\n    if (!this.options.clientId) {\n      throw Error('clientId is not configured');\n    }\n\n    if (!this.options.clientSecret) {\n      throw Error('clientSecret is not configured');\n    }\n\n    const url = `${this.options.oauthUrl}/oauth/access-token`;\n    log(`POST ${url} queryParams:${JSON.stringify(params)}`);\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: params\n    });\n  }\n}\n\nconst refreshTokenParameterDefinition = [\n  {name: 'refreshToken', validations: ['required', 'string']}\n];\n\nconst authorizationCodeParameterDefinition = [\n  {name: 'authorizationCode', validations: ['required', 'string']}\n];\n\nmodule.exports = OAuth;\n"],"file":"oauth.js"}