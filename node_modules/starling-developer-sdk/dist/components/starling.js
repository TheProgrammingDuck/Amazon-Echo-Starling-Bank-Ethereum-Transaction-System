(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', './entities/customer', './entities/account', './entities/address', './entities/transaction', './entities/card', './entities/oauth', './entities/contact', './entities/payment', './entities/mandate', './entities/savingsGoals', './entities/whoAmI'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, require('./entities/customer'), require('./entities/account'), require('./entities/address'), require('./entities/transaction'), require('./entities/card'), require('./entities/oauth'), require('./entities/contact'), require('./entities/payment'), require('./entities/mandate'), require('./entities/savingsGoals'), require('./entities/whoAmI'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, global.customer, global.account, global.address, global.transaction, global.card, global.oauth, global.contact, global.payment, global.mandate, global.savingsGoals, global.whoAmI);
    global.starling = mod.exports;
  }
})(this, function (module, _customer, _account, _address, _transaction, _card, _oauth, _contact, _payment, _mandate, _savingsGoals, _whoAmI) {
  'use strict';

  var _customer2 = _interopRequireDefault(_customer);

  var _account2 = _interopRequireDefault(_account);

  var _address2 = _interopRequireDefault(_address);

  var _transaction2 = _interopRequireDefault(_transaction);

  var _card2 = _interopRequireDefault(_card);

  var _oauth2 = _interopRequireDefault(_oauth);

  var _contact2 = _interopRequireDefault(_contact);

  var _payment2 = _interopRequireDefault(_payment);

  var _mandate2 = _interopRequireDefault(_mandate);

  var _savingsGoals2 = _interopRequireDefault(_savingsGoals);

  var _whoAmI2 = _interopRequireDefault(_whoAmI);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Starling = function () {

    /**
     * Create an instance of the starling client
     * @param {Object=} options - configuration parameters
     */
    function Starling(options) {
      _classCallCheck(this, Starling);

      var defaults = {
        apiUrl: 'https://api.starlingbank.com',
        oauthUrl: 'https://oauth.starlingbank.com',
        clientId: '',
        clientSecret: ''
      };

      this.config = Object.assign({}, defaults, options);

      this.whoAmI = new _whoAmI2.default(this.config);
      this.customer = new _customer2.default(this.config);
      this.account = new _account2.default(this.config);
      this.address = new _address2.default(this.config);
      this.transaction = new _transaction2.default(this.config);
      this.payment = new _payment2.default(this.config);
      this.mandate = new _mandate2.default(this.config);
      this.contact = new _contact2.default(this.config);
      this.card = new _card2.default(this.config);
      this.savingsGoals = new _savingsGoals2.default(this.config);
      this.oAuth = new _oauth2.default(this.config);
    }

    /**
     * Gets the customer UUID and permissions corresponding to the access token passed
     * @param {string=} accessToken - the oauth bearer token.  If not
     * specified, the accessToken on the options object is used.
     * @return {Promise} - the http request promise
     */


    _createClass(Starling, [{
      key: 'getMe',
      value: function getMe() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.whoAmI.getMe(accessToken);
      }
    }, {
      key: 'getCustomer',
      value: function getCustomer() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.customer.getCustomer(accessToken);
      }
    }, {
      key: 'getAccount',
      value: function getAccount() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.account.getAccount(accessToken);
      }
    }, {
      key: 'getBalance',
      value: function getBalance() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.account.getBalance(accessToken);
      }
    }, {
      key: 'getAddresses',
      value: function getAddresses() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.address.getAddresses(accessToken);
      }
    }, {
      key: 'getTransactions',
      value: function getTransactions() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var fromDate = arguments[1];
        var toDate = arguments[2];
        var source = arguments[3];

        return this.transaction.getTransactions(accessToken, fromDate, toDate, source);
      }
    }, {
      key: 'getTransaction',
      value: function getTransaction() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var transactionId = arguments[1];
        var source = arguments[2];

        return this.transaction.getTransaction(accessToken, transactionId, source);
      }
    }, {
      key: 'listMandates',
      value: function listMandates() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.mandate.listMandates(accessToken);
      }
    }, {
      key: 'deleteMandate',
      value: function deleteMandate() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var mandateId = arguments[1];

        return this.mandate.deleteMandate(accessToken, mandateId);
      }
    }, {
      key: 'listScheduledPayments',
      value: function listScheduledPayments() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.payment.listScheduledPayments(accessToken);
      }
    }, {
      key: 'makeLocalPayment',
      value: function makeLocalPayment() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var destinationAccountUid = arguments[1];
        var reference = arguments[2];
        var amount = arguments[3];
        var currency = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'GBP';

        return this.payment.makeLocalPayment(accessToken, destinationAccountUid, reference, amount, currency);
      }
    }, {
      key: 'getContacts',
      value: function getContacts() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.contact.getContacts(accessToken);
      }
    }, {
      key: 'getContactAccount',
      value: function getContactAccount() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var contactId = arguments[1];

        return this.contact.getContactAccount(accessToken, contactId);
      }
    }, {
      key: 'createContact',
      value: function createContact() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var name = arguments[1];
        var accountType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'UK_ACCOUNT_AND_SORT_CODE';
        var accountNumber = arguments[3];
        var sortCode = arguments[4];
        var customerId = arguments[5];

        return this.contact.createContact(accessToken, name, accountType, accountNumber, sortCode, customerId);
      }
    }, {
      key: 'deleteContact',
      value: function deleteContact(accessToken, contactId) {
        return this.contact.deleteContact(accessToken, contactId);
      }
    }, {
      key: 'listSavingsGoals',
      value: function listSavingsGoals() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.savingsGoals.listSavingsGoals(accessToken);
      }
    }, {
      key: 'getSavingsGoal',
      value: function getSavingsGoal() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var savingsGoalId = arguments[1];

        return this.savingsGoals.getSavingsGoal(accessToken, savingsGoalId);
      }
    }, {
      key: 'createSavingsGoal',
      value: function createSavingsGoal() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;
        var savingsGoalId = arguments[1];
        var name = arguments[2];
        var currency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'GBP';
        var targetAmount = arguments[4];
        var targetCurrency = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'GBP';
        var base64EncodedPhoto = arguments[6];

        return this.savingsGoals.createSavingsGoal(accessToken, savingsGoalId, name, currency, targetAmount, targetCurrency, base64EncodedPhoto);
      }
    }, {
      key: 'deleteSavingsGoal',
      value: function deleteSavingsGoal(accessToken, savingsGoalId) {
        return this.savingsGoals.deleteSavingsGoal(accessToken, savingsGoalId);
      }
    }, {
      key: 'getCard',
      value: function getCard() {
        var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.accessToken;

        return this.card.getCard(accessToken);
      }
    }, {
      key: 'getAccessToken',
      value: function getAccessToken(authorizationCode) {
        return this.oAuth.getAccessToken(authorizationCode);
      }
    }, {
      key: 'refreshAccessToken',
      value: function refreshAccessToken(refreshToken) {
        return this.oAuth.refreshAccessToken(refreshToken);
      }
    }]);

    return Starling;
  }();

  module.exports = Starling;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=starling.js.map
