{"version":3,"names":[],"mappings":"","sources":["starling.js"],"sourcesContent":["import Customer from './entities/customer';\nimport Account from './entities/account';\nimport Address from './entities/address';\nimport Transaction from './entities/transaction';\nimport Card from './entities/card';\nimport OAuth from './entities/oauth';\nimport Contact from './entities/contact';\nimport Payment from './entities/payment';\nimport Mandate from './entities/mandate';\nimport SavingsGoals from './entities/savingsGoals';\nimport WhoAmI from './entities/whoAmI';\n\n/**\n * Facade to dispatch operations to services\n */\nclass Starling {\n\n  /**\n   * Create an instance of the starling client\n   * @param {Object=} options - configuration parameters\n   */\n  constructor (options) {\n    const defaults = {\n      apiUrl: 'https://api.starlingbank.com',\n      oauthUrl: 'https://oauth.starlingbank.com',\n      clientId: '',\n      clientSecret: ''\n    };\n\n    this.config = Object.assign({}, defaults, options);\n\n    this.whoAmI = new WhoAmI(this.config);\n    this.customer = new Customer(this.config);\n    this.account = new Account(this.config);\n    this.address = new Address(this.config);\n    this.transaction = new Transaction(this.config);\n    this.payment = new Payment(this.config);\n    this.mandate = new Mandate(this.config);\n    this.contact = new Contact(this.config);\n    this.card = new Card(this.config);\n    this.savingsGoals = new SavingsGoals(this.config);\n    this.oAuth = new OAuth(this.config);\n  }\n\n  /**\n   * Gets the customer UUID and permissions corresponding to the access token passed\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getMe (accessToken = this.config.accessToken) {\n    return this.whoAmI.getMe(accessToken);\n  }\n\n  /**\n   * Gets the customer's details\n   * @param {string=} accessToken - the oauth bearer token. If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getCustomer (accessToken = this.config.accessToken) {\n    return this.customer.getCustomer(accessToken);\n  }\n\n  /**\n   * Gets the customer's account details\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getAccount (accessToken = this.config.accessToken) {\n    return this.account.getAccount(accessToken);\n  }\n\n  /**\n   * Gets the customer's balance\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getBalance (accessToken = this.config.accessToken) {\n    return this.account.getBalance(accessToken);\n  }\n\n  /**\n   * Gets the customer's addresses (current and previous)\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (accessToken = this.config.accessToken) {\n    return this.address.getAddresses(accessToken);\n  }\n\n  /**\n   * Gets the customer's transaction history\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @param {string} fromDate - filter transactions after this date. Format: YYYY-MM-DD (optional,\n   *   defaults to most recent 100 transactions)\n   * @param {string} toDate - filter transactions before this date. Format: YYYY-MM-DD (optional,\n   *   defaults to current date if not provided)\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, results are not filtered by source.\n   * @return {Promise} - the http request promise\n   */\n  getTransactions (accessToken = this.config.accessToken, fromDate, toDate, source) {\n    return this.transaction.getTransactions(accessToken, fromDate, toDate, source);\n  }\n\n  /**\n   * Gets the full details of a single transaction\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @param {string} transactionId - the unique transaction ID\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, only generic transaction information will be returned.\n   * @return {Promise} - the http request promise\n   */\n  getTransaction (accessToken = this.config.accessToken, transactionId, source) {\n    return this.transaction.getTransaction(accessToken, transactionId, source);\n  }\n\n  /**\n   * Gets the customer's current direct-debit mandates\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  listMandates (accessToken = this.config.accessToken) {\n    return this.mandate.listMandates(accessToken);\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} mandateId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (accessToken = this.config.accessToken, mandateId) {\n    return this.mandate.deleteMandate(accessToken, mandateId);\n  }\n\n  /**\n   * Lists the customer's scheduled payments\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listScheduledPayments (accessToken = this.config.accessToken) {\n    return this.payment.listScheduledPayments(accessToken);\n  }\n\n  /**\n   * Makes a payment on behalf of the customer to another UK bank account using the Faster Payments network\n   * @param {string} accessToken - the oauth bearer token.\n   *  @param {string} destinationAccountUid - the account identifier of the recipient\n   * @param {string} reference - The payment reference, max. 18 characters.\n   * @param {string} amount - the amount to be send.\n   * @param {string=} currency - the currency, optional, defaults to \"GBP\".\n   * @return {Promise} - the http request promise\n   */\n  makeLocalPayment (accessToken = this.config.accessToken, destinationAccountUid, reference, amount, currency = 'GBP') {\n    return this.payment.makeLocalPayment(accessToken, destinationAccountUid, reference, amount, currency);\n  }\n\n  /**\n   * Gets the customer's contacts (payees)\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getContacts (accessToken = this.config.accessToken) {\n    return this.contact.getContacts(accessToken);\n  }\n\n  /**\n   * Gets a specific contact (payee)\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the contact's ID.\n   * @return {Promise} - the http request promise\n   */\n  getContactAccount (accessToken = this.config.accessToken, contactId) {\n    return this.contact.getContactAccount(accessToken, contactId);\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} name - the name of the new contact.\n   * @param {string=} accountType - the account type (domestic or international), optional and defaults to\n   *   UK_ACCOUNT_AND_SORT_CODE.\n   * @param {string} accountNumber - the contact's bank account number.\n   * @param {string} sortCode - the contact's sort code.\n   * @param {string} customerId - the customer's ID.\n   * @return {Promise} - the http request promise\n   */\n  createContact (accessToken = this.config.accessToken, name, accountType = 'UK_ACCOUNT_AND_SORT_CODE', accountNumber, sortCode, customerId) {\n    return this.contact.createContact(accessToken, name, accountType, accountNumber, sortCode, customerId);\n  }\n\n  deleteContact (accessToken, contactId) {\n    return this.contact.deleteContact(accessToken, contactId);\n  }\n\n  /**\n   * Gets a list of the customer's savings goals\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listSavingsGoals (accessToken = this.config.accessToken) {\n    return this.savingsGoals.listSavingsGoals(accessToken);\n  }\n\n  /**\n   * Gets a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (accessToken = this.config.accessToken, savingsGoalId) {\n    return this.savingsGoals.getSavingsGoal(accessToken, savingsGoalId);\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID, generate one if creating a goal.\n   * @param {string} name - the name of the new contact.\n   * @param {string} currency - the currency of the savings goal. Defaults to 'GBP'.\n   * @param {number} targetAmount - the target amount in minor units (e.g. 1234 => Â£12.34).\n   * @param {string} targetCurrency - the target currency, also defaults to 'GBP'.\n   * @param {string} base64EncodedPhoto - base64 encoded image to associate with the goal. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (accessToken = this.config.accessToken, savingsGoalId, name, currency = 'GBP',  targetAmount, targetCurrency = 'GBP', base64EncodedPhoto) {\n    return this.savingsGoals.createSavingsGoal(accessToken, savingsGoalId, name, currency,  targetAmount, targetCurrency, base64EncodedPhoto);\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (accessToken, savingsGoalId) {\n    return this.savingsGoals.deleteSavingsGoal(accessToken, savingsGoalId);\n  }\n\n  /**\n   * Gets the customer's card\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getCard (accessToken = this.config.accessToken) {\n    return this.card.getCard(accessToken);\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the\n   * user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.oAuth.getAccessToken(authorizationCode);\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used to claim a new access token when the access token\n   * expires. A new refresh token is also returned.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.oAuth.refreshAccessToken(refreshToken);\n  }\n}\n\nmodule.exports = Starling;\n"],"file":"starling.js"}