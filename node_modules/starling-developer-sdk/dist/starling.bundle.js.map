{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/axios/index.js","node_modules/axios/lib/adapters/xhr.js","node_modules/axios/lib/axios.js","node_modules/axios/lib/core/InterceptorManager.js","node_modules/axios/lib/core/dispatchRequest.js","node_modules/axios/lib/defaults.js","node_modules/axios/lib/helpers/bind.js","node_modules/axios/lib/helpers/btoa.js","node_modules/axios/lib/helpers/buildURL.js","node_modules/axios/lib/helpers/combineURLs.js","node_modules/axios/lib/helpers/cookies.js","node_modules/axios/lib/helpers/isAbsoluteURL.js","node_modules/axios/lib/helpers/isURLSameOrigin.js","node_modules/axios/lib/helpers/parseHeaders.js","node_modules/axios/lib/helpers/spread.js","node_modules/axios/lib/helpers/transformData.js","node_modules/axios/lib/utils.js","node_modules/debug/src/browser.js","node_modules/debug/src/debug.js","node_modules/ms/index.js","node_modules/process/browser.js","src/entities/account.js","src/entities/address.js","src/entities/card.js","src/entities/contact.js","src/entities/customer.js","src/entities/mandate.js","src/entities/oauth.js","src/entities/payment.js","src/entities/savingsGoals.js","src/entities/transaction.js","src/entities/whoAmI.js","src/starling.js","src/utils/http.js","src/utils/validator.js"],"names":[],"mappingsvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"starling.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar transformData = require('./../helpers/transformData');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar btoa = (typeof window !== 'undefined' && window.btoa) || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  var requestData = config.data;\n  var requestHeaders = config.headers;\n\n  if (utils.isFormData(requestData)) {\n    delete requestHeaders['Content-Type']; // Let the browser set it\n  }\n\n  var request = new XMLHttpRequest();\n  var loadEvent = 'onreadystatechange';\n  var xDomain = false;\n\n  // For IE 8/9 CORS support\n  // Only supports POST and GET calls and doesn't returns the response headers.\n  // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n  if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {\n    request = new window.XDomainRequest();\n    loadEvent = 'onload';\n    xDomain = true;\n  }\n\n  // HTTP basic authentication\n  if (config.auth) {\n    var username = config.auth.username || '';\n    var password = config.auth.password || '';\n    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n  }\n\n  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n  // Set the request timeout in MS\n  request.timeout = config.timeout;\n\n  // For IE 9 CORS support.\n  request.onprogress = function handleProgress() {};\n  request.ontimeout = function handleTimeout() {};\n\n  // Listen for ready state\n  request[loadEvent] = function handleLoad() {\n    if (!request || (request.readyState !== 4 && !xDomain)) {\n      return;\n    }\n\n    // The request errored out and we didn't get a response, this will be\n    // handled by onerror instead\n    if (request.status === 0) {\n      return;\n    }\n\n    // Prepare the response\n    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n    var response = {\n      data: transformData(\n        responseData,\n        responseHeaders,\n        config.transformResponse\n      ),\n      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n      status: request.status === 1223 ? 204 : request.status,\n      statusText: request.status === 1223 ? 'No Content' : request.statusText,\n      headers: responseHeaders,\n      config: config,\n      request: request\n    };\n\n    // Resolve or reject the Promise based on the status\n    ((response.status >= 200 && response.status < 300) ||\n     (!('status' in request) && request.responseText) ?\n      resolve :\n      reject)(response);\n\n    // Clean up request\n    request = null;\n  };\n\n  // Handle low level network errors\n  request.onerror = function handleError() {\n    // Real errors are hidden from us by the browser\n    // onerror should only fire if it's a network error\n    reject(new Error('Network Error'));\n\n    // Clean up request\n    request = null;\n  };\n\n  // Handle timeout\n  request.ontimeout = function handleTimeout() {\n    var err = new Error('timeout of ' + config.timeout + 'ms exceeded');\n    err.timeout = config.timeout;\n    err.code = 'ECONNABORTED';\n    reject(err);\n\n    // Clean up request\n    request = null;\n  };\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n  if (utils.isStandardBrowserEnv()) {\n    var cookies = require('./../helpers/cookies');\n\n    // Add xsrf header\n    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n    if (xsrfValue) {\n      requestHeaders[config.xsrfHeaderName] = xsrfValue;\n    }\n  }\n\n  // Add headers to the request\n  if ('setRequestHeader' in request) {\n    utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n        // Remove Content-Type if data is undefined\n        delete requestHeaders[key];\n      } else {\n        // Otherwise add header to the request\n        request.setRequestHeader(key, val);\n      }\n    });\n  }\n\n  // Add withCredentials to request if needed\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  }\n\n  // Add responseType to request if needed\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  // Handle progress if needed\n  if (config.progress) {\n    if (config.method === 'post' || config.method === 'put') {\n      request.upload.addEventListener('progress', config.progress);\n    } else if (config.method === 'get') {\n      request.addEventListener('progress', config.progress);\n    }\n  }\n\n  // Format request data\n  if (utils.isArrayBuffer(requestData)) {\n    requestData = new DataView(requestData);\n  }\n\n  if (requestData === undefined) {\n    requestData = null;\n  }\n\n  // Send the request\n  request.send(requestData);\n};\n","'use strict';\n\nvar defaults = require('./defaults');\nvar utils = require('./utils');\nvar dispatchRequest = require('./core/dispatchRequest');\nvar InterceptorManager = require('./core/InterceptorManager');\nvar isAbsoluteURL = require('./helpers/isAbsoluteURL');\nvar combineURLs = require('./helpers/combineURLs');\nvar bind = require('./helpers/bind');\nvar transformData = require('./helpers/transformData');\n\nfunction Axios(defaultConfig) {\n  this.defaults = utils.merge({}, defaultConfig);\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Don't allow overriding defaults.withCredentials\n  config.withCredentials = config.withCredentials || this.defaults.withCredentials;\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nvar defaultInstance = new Axios(defaults);\nvar axios = module.exports = bind(Axios.prototype.request, defaultInstance);\n\n// Expose properties from defaultInstance\naxios.defaults = defaultInstance.defaults;\naxios.interceptors = defaultInstance.interceptors;\n\n// Factory for creating new instances\naxios.create = function create(defaultConfig) {\n  return new Axios(defaultConfig);\n};\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n  axios[method] = bind(Axios.prototype[method], defaultInstance);\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n  axios[method] = bind(Axios.prototype[method], defaultInstance);\n});\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\n/**\n * Dispatch a request to the server using whichever adapter\n * is supported by the current environment.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  return new Promise(function executor(resolve, reject) {\n    try {\n      var adapter;\n\n      if (typeof config.adapter === 'function') {\n        // For custom adapter support\n        adapter = config.adapter;\n      } else if (typeof XMLHttpRequest !== 'undefined') {\n        // For browsers use XHR adapter\n        adapter = require('../adapters/xhr');\n      } else if (typeof process !== 'undefined') {\n        // For node use HTTP adapter\n        adapter = require('../adapters/http');\n      }\n\n      if (typeof adapter === 'function') {\n        adapter(resolve, reject, config);\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\n","'use strict';\n\nvar utils = require('./utils');\n\nvar PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nmodule.exports = {\n  transformRequest: [function transformRequestJSON(data, headers) {\n    if (utils.isFormData(data)) {\n      return data;\n    }\n    if (utils.isArrayBuffer(data)) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {\n      // Set application/json if no Content-Type has been specified\n      if (!utils.isUndefined(headers)) {\n        utils.forEach(headers, function processContentTypeHeader(val, key) {\n          if (key.toLowerCase() === 'content-type') {\n            headers['Content-Type'] = val;\n          }\n        });\n\n        if (utils.isUndefined(headers['Content-Type'])) {\n          headers['Content-Type'] = 'application/json;charset=utf-8';\n        }\n      }\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponseJSON(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      data = data.replace(PROTECTION_PREFIX, '');\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    },\n    patch: utils.merge(DEFAULT_CONTENT_TYPE),\n    post: utils.merge(DEFAULT_CONTENT_TYPE),\n    put: utils.merge(DEFAULT_CONTENT_TYPE)\n  },\n\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1\n};\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      }\n\n      if (!utils.isArray(val)) {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '');\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  typeof document.createElement -> undefined\n */\nfunction isStandardBrowserEnv() {\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined' &&\n    typeof document.createElement === 'function'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArray(obj)) {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  trim: trim\n};\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:account-service');\n\n/**\n * Service to interact with a customer's account\n */\nclass Account {\n\n  /**\n   * Creates an instance of the account client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a customer's account\n   * @param {string} accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccount (accessToken) {\n    typeValidation(arguments, getAccountParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/accounts`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Retrieves the customer's balance\n   * @param {string} accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getBalance (accessToken) {\n    typeValidation(arguments, getBalanceParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/accounts/balance`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getAccountParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nconst getBalanceParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Account;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:address-service');\n\n/**\n * Service to interact with a customer address\n */\nclass Address {\n\n  /**\n   * Creates an instance of the address client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a customer's address\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (accessToken) {\n    typeValidation(arguments, getAddressParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/addresses`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getAddressParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Address;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:card-service');\n\n/**\n * Service to interact with a customer card\n */\nclass Card {\n\n  /**\n   * Creates an instance of the client's card\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a customer's card\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getCard (accessToken) {\n    typeValidation(arguments, getCardParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/cards`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getCardParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Card;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders, postHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:contact-service');\n\n/**\n * Service to interact with a customer's contacts (payees)\n */\nclass Contact {\n\n  /**\n   * Create a new contact service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's contacts (payees)\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getContacts (accessToken) {\n    typeValidation(arguments, getContactsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets a specific contact's (payee) account details\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the contact's ID.\n   * @return {Promise} - the http request promise\n   */\n  getContactAccount (accessToken, contactId) {\n    typeValidation(arguments, getContactAccountParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts/${contactId}/accounts`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} name - the name of the new contact.\n   * @param {string} accountType - the account type (domestic or international).\n   * @param {string} accountNumber - the contact's bank account number.\n   * @param {string} sortCode - the contact's sort code.\n   * @param {string} customerId - the customer's ID. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createContact (accessToken, name, accountType, accountNumber, sortCode, customerId) {\n    typeValidation(arguments, createContactParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts`;\n    log(`POST ${url}`);\n    return axios({\n      method: 'POST',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        accountType,\n        accountNumber,\n        sortCode,\n        customerId\n      }),\n    });\n  }\n\n\n  /**\n   * Deletes a specific contact (payee) from the customer's account\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the Identifier of the contact to be deleted.\n   * @return {Promise} - the http request promise\n   */\n  deleteContact (accessToken, contactId) {\n    typeValidation(arguments, deleteContactParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts/${contactId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken),\n    });\n  }\n}\n\nconst getContactsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nconst getContactAccountParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'contactId', validations: ['required', 'string']}\n  ];\n\nconst createContactParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'name', validations: ['required', 'string']},\n  {name: 'accountType', validations: ['required', 'string']},\n  {name: 'accountNumber', validations: ['required', 'string']},\n  {name: 'sortCode', validations: ['required', 'string']},\n  {name: 'customerId', validations: ['optional', 'string']}\n  ];\n\nconst deleteContactParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'contactId', validations: ['required', 'string']}\n];\n\nmodule.exports = Contact;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:customer-service');\n\n/**\n * Service to interact with a customer\n */\nclass Customer {\n\n  /**\n   * Create a new customer service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's details\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getCustomer (accessToken) {\n    typeValidation(arguments, getCustomerParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/customers`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getCustomerParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Customer;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:mandate-service');\n\n\n/**\n * Service to interact with a customer's transactions\n */\nclass Mandate {\n  /**\n   * Create a new transaction service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets a list of the customer's current direct debit mandates\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listMandates (accessToken) {\n    typeValidation(arguments, listMandatesParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/direct-debit/mandates`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} mandateId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (accessToken, mandateId) {\n    typeValidation(arguments, deleteMandateParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/direct-debit/mandates/${mandateId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst listMandatesParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n];\n\nconst deleteMandateParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'mandateId', validations: ['required', 'string']}\n];\n\nmodule.exports = Mandate;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {typeValidation} from '../utils/validator';\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code';\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token';\n\nconst log = debug('starling:oauth-service');\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the\n   * user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    typeValidation(arguments, authorizationCodeParameterDefinition);\n    return this.getOAuthToken({\n      'code': authorizationCode,\n      'grant_type': ACCESS_TOKEN_GRANT_TYPE,\n      'client_id': this.options.clientId,\n      'client_secret': this.options.clientSecret,\n      'redirect_uri': this.options.redirectUri\n    });\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token\n   * expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    typeValidation(arguments, refreshTokenParameterDefinition);\n    return this.getOAuthToken({\n      'refresh_token': refreshToken,\n      'grant_type': REFRESH_TOKEN_GRANT_TYPE,\n      'client_id': this.options.clientId,\n      'client_secret': this.options.clientSecret\n    });\n  }\n\n  /**\n   * Gets the access token from the starling oauth endpoint\n   * @param {object} params - the query params passed to the oauth endpoint as per the oauth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (params) {\n    if (!this.options.clientId) {\n      throw Error('clientId is not configured');\n    }\n\n    if (!this.options.clientSecret) {\n      throw Error('clientSecret is not configured');\n    }\n\n    const url = `${this.options.oauthUrl}/oauth/access-token`;\n    log(`POST ${url} queryParams:${JSON.stringify(params)}`);\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: params\n    });\n  }\n}\n\nconst refreshTokenParameterDefinition = [\n  {name: 'refreshToken', validations: ['required', 'string']}\n];\n\nconst authorizationCodeParameterDefinition = [\n  {name: 'authorizationCode', validations: ['required', 'string']}\n];\n\nmodule.exports = OAuth;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders, postHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:payment-service');\n\n\n/**\n * Service to interact with a customer's transactions\n */\nclass Payment {\n  /**\n   * Create a new transaction service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Makes a payment on behalf of the customer to another UK bank account using the Faster Payments network\n   * @param {string} accessToken - the oauth bearer token.\n   *  @param {string} destinationAccountUid - the account identifier of the recipient\n   * @param {string} reference - The payment reference, max. 18 characters.\n   * @param {string} amount - the amount to be send.\n   * @param {string=} currency - the currency, optional, defaults to \"GBP\".\n   * @return {Promise} - the http request promise\n   */\n  makeLocalPayment (accessToken, destinationAccountUid, reference, amount, currency) {\n    typeValidation(arguments, makeLocalPaymentParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/payments/local`;\n    log(`POST ${url}`);\n    return axios({\n      method: 'POST',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        destinationAccountUid,\n        payment: {\n          amount,\n          currency\n        },\n        reference\n      })\n    });\n  }\n\n\n  /**\n   * Lists the customer's scheduled payments\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listScheduledPayments (accessToken) {\n    typeValidation(arguments, listScheduledPaymentsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/payments/scheduled`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst makeLocalPaymentParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'destinationAccountUid', validations: ['required', 'string']},\n  {name: 'reference', validations: ['required', 'string']},\n  {name: 'amount', validations: ['required', 'string']},\n  {name: 'currency', validations: ['optional', 'string']}\n];\n\nconst listScheduledPaymentsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n];\n\nmodule.exports = Payment;\n","import axios from 'axios';\nimport debug from 'debug';\nimport { defaultHeaders, postHeaders } from '../utils/http';\nimport { typeValidation } from '../utils/validator';\n\nconst log = debug('starling:saving-goals-service');\n\n/**\n * Service to interact with a customer's savings goals\n */\nclass SavingsGoals {\n  /**\n   * Create a new savings goal service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets a list of the customer's savings goals\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listSavingsGoals (accessToken) {\n    typeValidation(arguments, listSavingsGoalsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (accessToken, savingsGoalId) {\n    typeValidation(arguments, getSavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Creates a savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID, generate one if creating a goal.\n   * @param {string} name - the name of the new contact.\n   * @param {string} currency - the currency of the savings goal. Defaults to 'GBP'.\n   * @param {number} targetAmount - the target amount in minor units (e.g. 1234 => £12.34).\n   * @param {string} targetCurrency - the target currency, also defaults to 'GBP'.\n   * @param {string} base64EncodedPhoto - base64 encoded image to associate with the goal. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (accessToken, savingsGoalId, name, currency, targetAmount, targetCurrency, base64EncodedPhoto) {\n    typeValidation(arguments, createSavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}`;\n    log(`PUT ${url}`);\n    return axios({\n      method: 'PUT',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        currency,\n        target: {\n          targetAmount,\n          targetCurrency\n        },\n        base64EncodedPhoto\n      })\n    });\n  }\n\n  /**\n   * Deletes specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (accessToken, savingsGoalId) {\n    typeValidation(arguments, deleteSavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst listSavingsGoalsParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] }\n];\n\nconst getSavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] }\n];\n\nconst deleteSavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] }\n];\n\nconst createSavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] },\n  { name: 'name', validations: [ 'required', 'string' ] },\n  { name: 'currency', validations: [ 'required', 'string' ] },\n  { name: 'targetAmount', validations: [ 'optional', 'number' ] },\n  { name: 'targetCurrency', validations: [ 'optional', 'string' ] },\n  { name: 'base64EncodedPhoto', validations: [ 'optional', 'string' ] }\n];\n\nmodule.exports = SavingsGoals;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:transaction-service');\n\nconst transactionSource = (source) => {\n  if (source === 'MASTER_CARD') {\n    return '/mastercard';\n  } else if (source === 'FASTER_PAYMENTS_IN') {\n    return '/fps/in';\n  } else if (source === 'FASTER_PAYMENTS_OUT') {\n    return '/fps/out';\n  } else if (source === 'DIRECT_DEBIT') {\n    return '/direct-debit';\n  } else {\n    return ''\n  }\n};\n\n/**\n * Service to interact with a customer's transactions\n */\nclass Transaction {\n  /**\n   * Create a new transaction service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's transactions over the given period\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} fromDate - filter transactions after this date. Format: YYYY-MM-DD\n   * @param {string} toDate - filter transactions before this date. Format: YYYY-MM-DD\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, results are not filtered by source.\n   * @return {Promise} - the http request promise\n   */\n  getTransactions (accessToken, fromDate, toDate, source) {\n    typeValidation(arguments, getTransactionsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/transactions${transactionSource(source)}`;\n    log(`GET ${url} from=${fromDate} to=${toDate}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        from: fromDate,\n        to: toDate\n      },\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets the full details of a single transaction\n   * @param {string} accessToken - the oauth bearer token\n   * @param {string} transactionId - the unique transaction ID\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, only generic transaction information will be returned.\n   * @return {Promise} - the http request promise\n   */\n  getTransaction (accessToken, transactionId, source) {\n    typeValidation(arguments, getTransactionParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/transactions${transactionSource(source)}/${transactionId}`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getTransactionsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'fromDate', validations: ['optional', 'string']},\n  {name: 'toDate', validations: ['optional', 'string']},\n  {name: 'source', validations: ['optional', 'string']}\n];\n\nconst getTransactionParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'transactionId', validations: ['required', 'string']},\n  {name: 'source', validations: ['optional', 'string']}\n];\n\nmodule.exports = Transaction;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:who-am-i-service');\n\n/**\n * Service to interact with the Who Am I endpoint\n */\nclass WhoAmI {\n\n  /**\n   * Creates an instance of the who am I client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves the customer UUID and permissions corresponding to the access token passed\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getMe (accessToken) {\n    typeValidation(arguments, getMeParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/me`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getMeParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = WhoAmI;\n","import Customer from './entities/customer';\nimport Account from './entities/account';\nimport Address from './entities/address';\nimport Transaction from './entities/transaction';\nimport Card from './entities/card';\nimport OAuth from './entities/oauth';\nimport Contact from './entities/contact';\nimport Payment from './entities/payment';\nimport Mandate from './entities/mandate';\nimport SavingsGoals from './entities/savingsGoals';\nimport WhoAmI from './entities/whoAmI';\n\n/**\n * Facade to dispatch operations to services\n */\nclass Starling {\n\n  /**\n   * Create an instance of the starling client\n   * @param {Object=} options - configuration parameters\n   */\n  constructor (options) {\n    const defaults = {\n      apiUrl: 'https://api.starlingbank.com',\n      oauthUrl: 'https://oauth.starlingbank.com',\n      clientId: '',\n      clientSecret: ''\n    };\n\n    this.config = Object.assign({}, defaults, options);\n\n    this.whoAmI = new WhoAmI(this.config);\n    this.customer = new Customer(this.config);\n    this.account = new Account(this.config);\n    this.address = new Address(this.config);\n    this.transaction = new Transaction(this.config);\n    this.payment = new Payment(this.config);\n    this.mandate = new Mandate(this.config);\n    this.contact = new Contact(this.config);\n    this.card = new Card(this.config);\n    this.savingsGoals = new SavingsGoals(this.config);\n    this.oAuth = new OAuth(this.config);\n  }\n\n  /**\n   * Gets the customer UUID and permissions corresponding to the access token passed\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getMe (accessToken = this.config.accessToken) {\n    return this.whoAmI.getMe(accessToken);\n  }\n\n  /**\n   * Gets the customer's details\n   * @param {string=} accessToken - the oauth bearer token. If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getCustomer (accessToken = this.config.accessToken) {\n    return this.customer.getCustomer(accessToken);\n  }\n\n  /**\n   * Gets the customer's account details\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getAccount (accessToken = this.config.accessToken) {\n    return this.account.getAccount(accessToken);\n  }\n\n  /**\n   * Gets the customer's balance\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getBalance (accessToken = this.config.accessToken) {\n    return this.account.getBalance(accessToken);\n  }\n\n  /**\n   * Gets the customer's addresses (current and previous)\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (accessToken = this.config.accessToken) {\n    return this.address.getAddresses(accessToken);\n  }\n\n  /**\n   * Gets the customer's transaction history\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @param {string} fromDate - filter transactions after this date. Format: YYYY-MM-DD (optional,\n   *   defaults to most recent 100 transactions)\n   * @param {string} toDate - filter transactions before this date. Format: YYYY-MM-DD (optional,\n   *   defaults to current date if not provided)\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, results are not filtered by source.\n   * @return {Promise} - the http request promise\n   */\n  getTransactions (accessToken = this.config.accessToken, fromDate, toDate, source) {\n    return this.transaction.getTransactions(accessToken, fromDate, toDate, source);\n  }\n\n  /**\n   * Gets the full details of a single transaction\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @param {string} transactionId - the unique transaction ID\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, only generic transaction information will be returned.\n   * @return {Promise} - the http request promise\n   */\n  getTransaction (accessToken = this.config.accessToken, transactionId, source) {\n    return this.transaction.getTransaction(accessToken, transactionId, source);\n  }\n\n  /**\n   * Gets the customer's current direct-debit mandates\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  listMandates (accessToken = this.config.accessToken) {\n    return this.mandate.listMandates(accessToken);\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} mandateId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (accessToken = this.config.accessToken, mandateId) {\n    return this.mandate.deleteMandate(accessToken, mandateId);\n  }\n\n  /**\n   * Lists the customer's scheduled payments\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listScheduledPayments (accessToken = this.config.accessToken) {\n    return this.payment.listScheduledPayments(accessToken);\n  }\n\n  /**\n   * Makes a payment on behalf of the customer to another UK bank account using the Faster Payments network\n   * @param {string} accessToken - the oauth bearer token.\n   *  @param {string} destinationAccountUid - the account identifier of the recipient\n   * @param {string} reference - The payment reference, max. 18 characters.\n   * @param {string} amount - the amount to be send.\n   * @param {string=} currency - the currency, optional, defaults to \"GBP\".\n   * @return {Promise} - the http request promise\n   */\n  makeLocalPayment (accessToken = this.config.accessToken, destinationAccountUid, reference, amount, currency = 'GBP') {\n    return this.payment.makeLocalPayment(accessToken, destinationAccountUid, reference, amount, currency);\n  }\n\n  /**\n   * Gets the customer's contacts (payees)\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getContacts (accessToken = this.config.accessToken) {\n    return this.contact.getContacts(accessToken);\n  }\n\n  /**\n   * Gets a specific contact (payee)\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the contact's ID.\n   * @return {Promise} - the http request promise\n   */\n  getContactAccount (accessToken = this.config.accessToken, contactId) {\n    return this.contact.getContactAccount(accessToken, contactId);\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} name - the name of the new contact.\n   * @param {string=} accountType - the account type (domestic or international), optional and defaults to\n   *   UK_ACCOUNT_AND_SORT_CODE.\n   * @param {string} accountNumber - the contact's bank account number.\n   * @param {string} sortCode - the contact's sort code.\n   * @param {string} customerId - the customer's ID.\n   * @return {Promise} - the http request promise\n   */\n  createContact (accessToken = this.config.accessToken, name, accountType = 'UK_ACCOUNT_AND_SORT_CODE', accountNumber, sortCode, customerId) {\n    return this.contact.createContact(accessToken, name, accountType, accountNumber, sortCode, customerId);\n  }\n\n  deleteContact (accessToken, contactId) {\n    return this.contact.deleteContact(accessToken, contactId);\n  }\n\n  /**\n   * Gets a list of the customer's savings goals\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listSavingsGoals (accessToken = this.config.accessToken) {\n    return this.savingsGoals.listSavingsGoals(accessToken);\n  }\n\n  /**\n   * Gets a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (accessToken = this.config.accessToken, savingsGoalId) {\n    return this.savingsGoals.getSavingsGoal(accessToken, savingsGoalId);\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID, generate one if creating a goal.\n   * @param {string} name - the name of the new contact.\n   * @param {string} currency - the currency of the savings goal. Defaults to 'GBP'.\n   * @param {number} targetAmount - the target amount in minor units (e.g. 1234 => £12.34).\n   * @param {string} targetCurrency - the target currency, also defaults to 'GBP'.\n   * @param {string} base64EncodedPhoto - base64 encoded image to associate with the goal. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (accessToken = this.config.accessToken, savingsGoalId, name, currency = 'GBP',  targetAmount, targetCurrency = 'GBP', base64EncodedPhoto) {\n    return this.savingsGoals.createSavingsGoal(accessToken, savingsGoalId, name, currency,  targetAmount, targetCurrency, base64EncodedPhoto);\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (accessToken, savingsGoalId) {\n    return this.savingsGoals.deleteSavingsGoal(accessToken, savingsGoalId);\n  }\n\n  /**\n   * Gets the customer's card\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getCard (accessToken = this.config.accessToken) {\n    return this.card.getCard(accessToken);\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the\n   * user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.oAuth.getAccessToken(authorizationCode);\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used to claim a new access token when the access token\n   * expires. A new refresh token is also returned.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.oAuth.refreshAccessToken(refreshToken);\n  }\n}\n\nmodule.exports = Starling;\n","export const defaultHeaders = (accessToken) => {\n  return {\n    Accept: 'application/json',\n    Authorization: `Bearer ${accessToken}`\n  };\n};\n\nexport const postHeaders = (accessToken) => {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${accessToken}`\n  };\n};","\nconst runRules = (pos, name, rules, value) => {\n  const valueType = typeof value;\n\n  if (rules[0] == 'optional') {\n    if (value && (valueType !== rules[1])) {\n      return `${name} parameter in position ${pos} is an optional ${rules[1]} but was ${valueType}`\n    }\n  }\n  if (rules[0] == 'required') {\n    if (value && (valueType !== rules[1])) {\n      return `${name} parameter in position ${pos} is a required ${rules[1]} but was ${valueType}`\n    } else if (!value) {\n      return `${name} parameter in position ${pos} is a required ${rules[1]} but was ${value}`\n    }\n  }\n};\n\nexport const  typeValidation = (args, def) => {\n  let problems = [];\n  for (let i = 0; i < def.length; i++) {\n    const pos = i;\n    const name = def[i].name;\n    const rules = def[i].validations;\n    const value = i <= args.length ? args[i] : undefined;\n    const problem = runRules(pos, name, rules, value);\n    if (problem) problems.push(problem);\n  }\n\n  if (problems.length) {\n    throw problems;\n  }\n\n};\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}